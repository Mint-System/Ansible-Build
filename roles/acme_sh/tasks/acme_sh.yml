---
- name: Ensure nginx data dir exists
  ansible.builtin.file:
    path: "{{ nginx_data_dir }}/proxies"
    state: directory

- name: Ensure {{ role_name }} data dir exists
  ansible.builtin.file:
    path: "{{ acme_sh_data_dir }}/out"
    state: directory

- name: Get list of nginx certs with dns attribute
  ansible.builtin.set_fact:
    acme_sh_certs: "{{ nginx_proxies | json_query('[?dns]') }}"

- name: Log certificates to issue
  ansible.builtin.debug:
    msg: "{{ acme_sh_certs | json_query('[*].src_hostname') | list }}"

- name: Init {{ role_name }} env vars
  ansible.builtin.set_fact:
    acme_sh_env:
      FREEDNS_User: "{{ acme_sh_freedns_user }}"
      FREEDNS_Password: "{{ acme_sh_freedns_password }}"
  when: acme_sh_freedns_user is defined and acme_sh_freedns_password is defined

- name: Init {{ role_name }} env vars
  ansible.builtin.set_fact:
    acme_sh_env:
      VERCEL_TOKEN: "{{ acme_sh_vercel_token }}"
  when: acme_sh_vercel_token is defined

- name: Issue {{ role_name }} certificates
  community.docker.docker_container:
    name: "{{ item.src_hostname | replace('*.', '') }}"
    labels:
      description: "{{ acme_sh_description }}"
    image: "{{ acme_sh_image }}"
    env: "{{ acme_sh_env }}"
    volumes:
      - "{{ acme_sh_data_dir }}:/acme.sh"
    command: --register-account -m {{ acme_sh_email }} --issue --dns {{ item.dns }} -d {{ item.src_hostname }} --debug --output-insecure
  loop: "{{ acme_sh_certs }}"
