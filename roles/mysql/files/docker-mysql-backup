#!/usr/bin/env bash
set -e

# Get script name
script=$(basename "$0")

# Display Help
help() {
  echo
  echo "$script"
  echo
  echo 'Description: Backup MySQL/MariaDB Docker database.'
  echo "Syntax: $script [-d|-o|-c|help]"
  echo 'Example: $script -d mysql,moodle -o /tmp -c mysql01'
  echo 'options:'
  echo '  -d    Comma-separated list of database names.'
  echo '  -a    Backup all databases'
  echo '  -o    Output directory. Defaults to '\''/var/tmp'\''.'
  echo '  -c    Docker container name. Defaults to '\''mysql'\''.' 
  echo '  help  Show $script manual.'
  echo
}

# Show help and exit
if [[ "$1" == 'help' ]]; then
    help
    exit
fi

# Process params
while getopts ':a :c: :d: :o:' opt; do
  case $opt in
    a) all='true'
    ;;
    c) container="$OPTARG"
    ;;
    d) databases="$OPTARG"
    ;;
    o) dir="$OPTARG"
    ;;
    \?) echo "Invalid option -$OPTARG" >&2
    help
    exit 1;;
  esac
done

# Fallback to environment vars and default values
: "${dir:=/var/tmp}"
: "${container:=mysql}"

# Verify variables
[[ -z "$databases" ]] && [[ -z "$all" ]] && { echo 'Parameter -d or -a|databases or all must be set' ; exit 1; }
[[ -z "$dir" ]] && { echo 'Parameter -d|dir is empty' ; exit 1; }
[[ -z "$container" ]] && { echo 'Parameter -c|container is empty' ; exit 1; }

# Get image
image=$(docker inspect $container --format='{{.Config.Image}}')

if $all; then
  # Get all databases from docker container
  
  if [[ "$image" =~ 'mariadb' ]]; then
    database_list=($(docker exec $container /bin/bash -c "mysql -u \$MARIADB_USER --password=\$MARIADB_PASSWORD \
      -Bse 'SHOW DATABASES' | grep -v -E '^(sys|information_schema|mysql|performance_schema)$'"))
  fi
  if [[ "$image" =~ 'mysql' ]]; then
    database_list=($(docker exec $container /bin/bash -c "mysql -p\$MYSQL_ROOT_PASSWORD \
      -Bse 'SHOW DATABASES' | grep -v -E '^(sys|information_schema|mysql|performance_schema)$'"))
  fi
  # Concate database list
  printf -v databases '%s,' "${database_list[@]}"
  databases="${databases%,}"
fi

if [[ -n $databases ]] ; then
  # Split database param values
  database_list=($(echo $databases | tr ',' '\n'))
fi

# Create backup folder
mkdir -p "${dir}/${container}"

# Cleanup backup folder
rm -rf "${dir:?}/${container}"/*

# Create dump with docker for each database
for database in "${database_list[@]}"
do
  if [[ "$image" =~ 'mariadb' ]]; then
    echo "Run Docker MariaDB backup for $database"
    docker exec $container /bin/bash -c "mysqldump -u \$MARIADB_USER --password=\$MARIADB_PASSWORD \
        $database" > "${dir}/${container}/${database}.sql"
  fi
  if [[ "$image" =~ 'mysql' ]]; then
    echo "Run Docker MySQL backup for $database"
    docker exec $container /bin/bash -c "mysqldump -p\$MYSQL_ROOT_PASSWORD \
        $database" > "${dir}/${container}/${database}.sql"
  fi
done

# Notify if backup has finished
echo "The Docker mysql backup has finished: ${dir}/${container}/{$databases}.sql"
