- name: Install restic
  apt:
    name: "{{ restic_client_package }}"

- name: Check if repo is initialized
  command: restic snapshots
  environment:
    RESTIC_PASSWORD: "{{ restic_repo_password }}"
    RESTIC_REPOSITORY: "rest:http://{{ restic_client_user }}:{{ restic_client_password }}@{{ restic_repo }}"
  ignore_errors: yes
  changed_when: false
  register: repo_initalized

- name: Init restic repository
  command: restic init
  environment:
    RESTIC_PASSWORD: "{{ restic_repo_password }}"
    RESTIC_REPOSITORY: "rest:http://{{ restic_client_user }}:{{ restic_client_password }}@{{ restic_repo }}"
  when: repo_initalized.failed

- name: Ensure restic environment vars exists
  lineinfile:
    dest: "/etc/environment"
    state: present
    regexp: "^{{ item.key }}="
    line: "{{ item.key }}={{ item.value }}"
  loop:
    - key: RESTIC_PASSWORD
      value: "{{ restic_repo_password }}"
    - key: RESTIC_REPOSITORY
      value: "rest:http://{{ restic_client_user }}:{{ restic_client_password }}@{{ restic_repo }}"

- name: Verify docker volume exists
  command: "docker volume inspect {{ item.volume }}"
  changed_when: false
  loop: "{{ restic_backup_sets }}"
  when: item.type == "docker-volume"

- name: Register docker volume backup jobs
  cron:
    name: "Backup job {{ item.id }}"
    hour: "{{ item.hour }}"
    minute: "{{ item.minute }}"
    job: ". /etc/environment; restic backup /var/lib/docker/volumes/{{ item.volume }}/_data/ \
      --tag {{ item.tags | join(' --tag ') }}"
  loop: "{{ restic_backup_sets }}"
  when: item.type == "docker-volume"

- name: Verify file path exists
  command: "ls {{ item.path }}"
  changed_when: false
  loop: "{{ restic_backup_sets }}"
  when: item.type == "file"

- name: Register file backup jobs
  cron:
    name: "Backup job {{ item.id }}"
    hour: "{{ item.hour }}"
    minute: "{{ item.minute }}"
    job: ". /etc/environment; restic backup {{ item.path }} \
      --tag {{ item.tags | join(' --tag ') }}"
  loop: "{{ restic_backup_sets }}"
  when: item.type == "file"

- name: Copy odoo backup script
  copy:
    src: odoo-backup
    dest: /usr/local/bin/odoo-backup
    mode: +x
  when: restic_odoo_master_password is defined

- name: Ensure restic environment vars exists
  lineinfile:
    dest: "/etc/environment"
    state: present
    regexp: "^ODOO_MASTER_PASSWORD="
    line: "ODOO_MASTER_PASSWORD={{ restic_odoo_master_password }}"
  when: restic_odoo_master_password is defined

- name: Register odoo backup jobs
  cron:
    name: "Backup job {{ item.id }}"
    hour: "{{ item.hour }}"
    minute: "{{ item.minute }}"
    job: ". /etc/environment; odoo-backup -d {{ item.database }}; restic backup /var/tmp/{{ item.database }}.zip \
      --tag {{ item.tags | join(' --tag ') }}"
  loop: "{{ restic_backup_sets }}"
  when: item.type == "odoo-backup"

- name: Register backup rotation job
  cron:
    name: "Backup rotation job"
    hour: "23"
    minute: "0"
    job: ". /etc/environment; restic forget --keep-daily {{ restic_backup_rotation.daily }} \
      --keep-weekly {{ restic_backup_rotation.weekly }} --keep-monthly {{ restic_backup_rotation.monthly }} --prune"
