#!/usr/bin/env bash
set -e

# Get script name
script=$(basename "$0")

# Display Help
help() {
  echo
  echo "$script"
  echo
  echo 'Description: Backup Docker Postgres database.'
  echo "Syntax: $script [-d|-a|-o|-c|help]"
  echo 'Example: $script -d postgres,odoo -o /tmp -c postgres01'
  echo 'options:'
  echo '  -d    Comma-separated list of database names.'
  echo '  -a    Backup all databases'
  echo "  -o    Output directory. Defaults to '/var/tmp'."
  echo "  -c    Docker container name. Defaults to 'postgres'."
  echo "  help  Show $script manual."
  echo
}

# Show help and exit
if [[ "$1" == 'help' ]]; then
  help
  exit
fi

# Initialise option flag with a false value
all='false'

# Process params
while getopts ":a :c: :d: :o:" opt; do
  case $opt in
    a) all='true'
    ;;
    c) container="$OPTARG"
    ;;
    d) databases="$OPTARG"
    ;;
    o) dir="$OPTARG"
    ;;
    \?) echo "Invalid option -$OPTARG" >&2
    help
    exit 1;;
  esac
done

# Fallback to environment vars and default values
: ${dir:='/var/tmp'}
: ${container:='postgres'}

# Verify variables
[[ -z "$databases" ]] && [[ "$all" == 'false' ]] && { echo 'Parameter -d or -a|databases or all must be set' ; exit 1; }
[[ -z "$dir" ]] && { echo 'Parameter -d|dir is empty' ; exit 1; }

if $all ; then
  # Get all databases from docker container
  database_list=($(docker exec "$container" /bin/bash -c "psql -U \$POSTGRES_USER \
    template1 -q -A -t -c 'SELECT datname FROM pg_database WHERE datistemplate = false;'"))
  # Concate database list
  printf -v databases '%s,' "${database_list[@]}"
  databases="${databases%,}"
fi

if [[ ! -z $databases ]] ; then
  # Split database param values
  database_list=($(echo $databases | tr ',' '\n'))
fi

# Create backup folder
mkdir -p ${dir}/${container}

# Cleanup backup folder
rm -rf ${dir}/${container}/*

# Create dump with docker for each database
for database in "${database_list[@]}"
do
  echo "Run Docker Postgres backup for $database"
  docker exec $container /bin/bash -c "pg_dump -U \$POSTGRES_USER $database" > "${dir}/${container}/${database}.sql"
done

# Notify if backup has finished
echo "The Docker Postgres backup has finished: ${dir}/${container}/{$databases}.sql"
