#!/usr/bin/env bash
set -e

# Get script name
script=$(basename "$0")

# Display Help
help() {
    echo
    echo "$script"
    echo
    echo 'Description: Drop database in Postgres Docker container.'
    echo "Syntax: $script [-c|help]"
    echo 'Example: $script -c postgres01 -d odoo'
    echo 'options:'
    echo "  -c    Docker container. Defaults to 'postgres'."
    echo '  -d    Comma-separated list of database names.'
    echo "  help  Show $script manual."
    echo
}

# Show help and exit
if [[ "$1" == 'help' ]]; then
    help
    exit
fi

# Process params
while getopts ":c: :d:" opt; do
  case $opt in
    c) container="$OPTARG";;
    d) database="$OPTARG";;
    \?) echo "Invalid option -$OPTARG" >&2
    help
    exit 1;;
  esac
done

# Verify variables
[[ -z "$database" ]] && { echo 'Parameter -d|database is empty' ; exit 1; }
[[ -z "$container" ]] && { echo 'Parameter -c|container is empty' ; exit 1; }

# Set alias
docker_exec_bash="docker exec $container /bin/bash -c"

# Kill datbase connections
echo 'Kill all database connections'
query="SELECT pg_terminate_backend(pid) FROM pg_stat_activity WHERE datname = '$database';"
$docker_exec_bash "psql postgres://\$POSTGRES_USER:\$POSTGRES_PASSWORD@\$HOSTNAME:5432/postgres -c \"$query\""

# Drop datbase
echo "Drop Postgres database $database on container $container ..."
$docker_exec_bash "psql postgresql://\$POSTGRES_USER:\$POSTGRES_PASSWORD@\$HOSTNAME/postgres -tAc 'DROP DATABASE \"$database\";'"
