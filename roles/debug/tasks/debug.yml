# - name: Distribution
#   debug: msg="{{ ansible_distribution }}"
# - name: Distribution version
#   debug: msg="{{ ansible_distribution_version }}"
# - name: Distribution major version
#   debug: msg="{{ ansible_distribution_major_version }}"

- name: Debug
  debug:
    var: groups.all

# - name: Dig src DNS record
#   debug:
#     msg: "{{ lookup('dig', item.src_hostname) }}"
#   loop: "{{ nginx_proxies }}"
#   register: dig_src

# - name: Dig host DNS record
#   debug:
#     msg: "{{ lookup('dig', ansible_host) }}"
#   register: dig_host

# - name: src DNS record
#   debug:
#     msg: "{{ dig_src.results   }}"

# - name: host DNS record
#   debug:
#     msg: "{{ dig_host.msg }}"

# - name: Fail if src IP is not resolved correctly 
#   fail:
#     msg: "DNS record for {{ item.item.src_hostname }} does not point to proxy host."
#   when: item.msg != dig_host.msg
#   loop: "{{ dig_src.results }}"

# - name: odoo master password
#   debug:
#     msg: "{{ vault_odoo_master_password }}"

# - name: odoo master password hash
#   debug:
#     msg: "{{ vault_odoo_master_password_hash }}"

# - name: odoo master password hash caculated
#   debug:
#     msg: "{{ vault_odoo_master_password | password_hash('pbkdf2_sha512') }}"

# - name: cadvisor https
#   debug:
#     msg: "{{ groups['all'] | map('extract', hostvars) |
#       json_query('[? cadvisor_hostname && prometheus_target_scheme==`https`].[ansible_host,prometheus_target_port]') | 
#       map('join', ':') | list }}"

# - name: cadvisor http
#   debug:
#     msg: "{{ groups['all'] | map('extract', hostvars) | 
#       json_query('[? cadvisor_hostname && prometheus_target_scheme==`http`].[ansible_host,prometheus_target_port]') | 
#       map('join', ':') | list }}"

# - name: node_exporter https
#   debug:
#     msg: "{{ groups['all'] | map('extract', hostvars) | 
#       json_query('[? node_exporter_hostname && prometheus_target_scheme==`https`].[ansible_host,prometheus_target_port]') | 
#       map('join', ':') | list }}"

# - name: node_exporter http
#   debug:
#     msg: "{{ groups['all'] | map('extract', hostvars) | 
#       json_query('[? node_exporter_hostname && prometheus_target_scheme==`http`].[ansible_host,prometheus_target_port]') | 
#       map('join', ':') | list }}"

# - name: nextcloud-exporter https
#   debug:
#     msg: "{{ groups['all'] | map('extract', hostvars) | 
#       json_query('[? nextcloud_exporter_hostname && prometheus_target_scheme==`https`].[ansible_host,prometheus_target_port]') | 
#       map('join', ':') | list }}"

# - name: bigbluebutton_exporter http
#   debug:
#     msg: "{{ groups['all'] | map('extract', hostvars) | 
#       json_query('[? bigbluebutton_exporter_hostname && prometheus_target_scheme==`http`].[ansible_host,prometheus_target_port]') | 
#       map('join', ':') | list }}"

# - name: postgres_exporter https
#   debug:
#     msg: "{{ groups['all'] | map('extract', hostvars) | 
#       json_query('[? postgres_exporter_hostname && prometheus_target_scheme==`https`].[ansible_host,prometheus_target_port]') | 
#       map('join', ':') | list }}"

# - name: restic_server https
#   debug:
#     msg: "{{ groups['all'] | map('extract', hostvars) | 
#       json_query('[? restic_server_hostname && prometheus_target_scheme==`https`].[ansible_host,prometheus_target_port]') |
#       map('join', ':') | list }}"

# - name: debug
#   debug:
#     msg: "{{ groups['all'] | map('extract', hostvars) | json_query('[*].nginx_proxies[?monitor==`true`].src_hostname') | flatten | map('regex_replace', '^(.*)$', 'https://\\1') }}"

# - name: Apply patches
#   debug:
#     msg: "{{ item.0.name }} {{ item.0.host | default(odoo_hostname) }}_{{ item.1 }}"
#   loop: "{{ odoo_patches | product(range(1,odoo_replicas+1)) | list }}"
#   notify: Restart odoo container
#   when: odoo_replicas > 1

# - name: Get installed python packages
#   command: "docker exec {{ odoo_hostname }}_{{ item }} pip3 freeze"
#   register: result
#   changed_when: false
#   with_sequence: start=1 end={{ odoo_replicas }}
#   when: odoo_replicas > 1

# - name: debug
#   debug:
#     var: result

# - name: with_nested -> loop
#   debug:
#     msg: "docker exec {{ item.1.cmd[2] }} pip3 install {{ item.0.name }}"
#   when: item.0.name not in item.1.stdout and odoo_replicas > 1
#   loop: "{{ odoo_pip_packages | product(result.results) | list }}"
#   when: item.name not in installed_pip_packages and odoo_replicas == 1

#   register: ansible_jobs
#   async: 120
#   poll: 0

# - name: Wait for extraction to finish
#   async_status:
#     jid: "{{ item.ansible_job_id }}"
#   register: ansible_job
#   until: ansible_job.finished
#   delay: 5
#   retries: 10
#   loop: "{{ ansible_jobs.results }}"

# - name: debug
#   debug:
#     msg:
#     - "{{ ansible_memtotal_mb }}"
#     - "{{ ansible_processor_vcpus }}"
#     - "{{ (ansible_memtotal_mb * 0.25 * 1024) | round }}kB"
#     - "{{ (ansible_memtotal_mb * 0.75 * 1024) | round }}kB"
#     - "{{ (ansible_memtotal_mb * 0.062 * 1024) | round }}kB"
#     - "{{ (((ansible_memtotal_mb * 1024) - (ansible_memtotal_mb * 0.25 * 1024)) / (3 * postgres_max_connections)) | round }}kB"

# - name: debug
#   debug:
#     var: groups['all'] | map('extract', hostvars) | json_query('[*].nginx_proxies[?monitor==`true`].src_hostname') | flatten

# - name: debug
#   debug:
#     var: hostvars[inventory_hostname]

# - name: set Digests
#   set_fact:
#     odoo_image: odoo@sha256:d4960fde390072f14b197f45775770b7cafc43d3afea60882766ce7d2004aa00

# - name: Pull odoo image
#   docker_image:
#     name: "{{ odoo_image }}"
#     source: pull
#     force_source: true
#   register: pull_odoo_image

# - name: Tag odoo image
#   command: "docker tag {{ odoo_image[7:19] }} odoo:{{ odoo_image[7:19] }}"
#   when: pull_odoo_image.image.RepoTags | length == 0 

# - name: Dig DNS CNAME record
#   debug: 
#     msg: "{{ lookup('dig', item.src_hostname, 'qtype=CNAME') }}"
#   register: dig
#   loop: "{{ nginx_proxies }}"

# - name: Fail if DNS record points to alias.zeit.co.
#   fail:
#     msg: DNS record points to default alias.
#   when: item.msg == 'alias.zeit.co.'
#   loop: "{{ dig.results }}"

# - name: Debug
#   debug:
#     var: groups

# |fetchlistfromdict(groups.servers)

# - name: Debug
#   debug:
#     var: (groups.exporter | map('extract', hostvars) | map(attribute='ansible_host') | list)
# (hostvars | dict2items | json_query('[*].value') | json_query('[?group_names[0]==`exporter`]') | select('ansible_host'))

# groups
  # [?ansible_host==`zeus.mint-system.com`]
  # | json_query('[?ansible_host==`zeus.mint-system.com`]')
  #

# - name: Register nginx conf files
#   command: "ls -1 {{ nginx_data_dir }}"
#   register: nginx_proxy_conf_files

# - name: Debug
#   debug:
#     var: nginx_proxy_conf_files

# - set_fact:
#     managed_files: "{{ nginx_proxies | map(attribute='src_hostname') | map('regex_replace', '^(.*)$', '\\1.conf') | list }}"

# - name: Debug
#   debug:
#     var: managed_files

# - name: Remove unmanaged nginx conf files
#   file: 
#     path: "{{ nginx_data_dir }}/{{ item }}"
#     state: absent
#   loop: "{{ nginx_proxy_conf_files.stdout_lines }}"
#   when: item not in (json_query(certbot_stat_filter) | list)

# - name: Debug modsecurity_exclude_rules_before_crs
#   debug:
#     msg: "{{ item }}"
#   loop: "{{ modsecurity_exclude_rules_before_crs }}"

# - name: Check if cert files exist
#   stat:
#     path: "{{ certbot_data_dir }}/live/{{ item.src_hostname }}"
#   loop: "{{ nginx_proxies }}"
#   register: certbot_certs

# - name: Debug certbot_certs
#   debug:
#     msg: "{{ certbot_certs }}"

# - name: Debug certbot_certs
#   debug:
#     msg: "{{ certbot_certs | json_query('results[*] | [?stat.exists==`false`].item.src_hostname') | list }}"

# - name: Debug hi
#   debug:
#     msg: "hi"
#   when: certbot_certs | json_query(certbot_stat_filter) | list

# - name: Debug postgres_hostname
#   debug:
#     var: postgres_hostname

# - name: Debug nginx_hostname
#   debug:
#     var: nginx_hostname

# - name: Debug bookstack_hostname
#   debug:
#     var: bookstack_hostname

# - name: debug
#   debug:
#     msg: "{{ vercel_domains.json | json_query('domains[*].{name: name, id: id}') }}"