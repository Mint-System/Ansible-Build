#!/bin/bash

# Exit script if command fails
# -u stops the script on unset variables
# -e stops the script on errors
# -o pipefail stops the script if a pipe fails
set -e

# Get script name
SCRIPT=$(basename "$0")

# Display Help
Help() {
    echo
    echo "$SCRIPT"
    echo
    echo "Description: Patch Odoo database from container."
    echo "Syntax: $SCRIPT [-d|-c|-f|help]"
    echo "Example: $SCRIPT -d erp-dev -c odoo06 -f tmp/sale/v14.0.1.0.0.sql"
    echo "options:"
    echo "  -d    Database name. Defaults to 'odoo'."
    echo "  -c    Docker container. Defaults to 'odoo'."
    echo "  -f    Odoo database patch file."
    echo "  help  Show $SCRIPT manual."
    echo
}

# Show help and exit
if [[ $1 == 'help' ]]; then
    Help
    exit
fi

# Process params
while getopts ":d: :c: :f:" opt; do
    case $opt in
        c) CONTAINER="$OPTARG";;
        d) DATABASE="$OPTARG";;
        f) FILE="$OPTARG";;
        \?) echo "Invalid option -$OPTARG" >&2
        Help
        exit;;
    esac
done

# Fallback to environment vars and default values
: ${CONTAINER:='odoo'}
: ${DATABASE:='odoo'}

# Verify variables
[[ -z "$FILE" ]] && { echo "Parameter -f|file is empty" ; exit 1; }

# Set alias
docker_exec_bash="docker exec -e DATABASE=$DATABASE $CONTAINER /bin/bash -c"

# Patch database
echo "Patch database $DATABASE with $FILE."
cat $FILE | $docker_exec_bash 'psql postgres://$USER:$PASSWORD@$HOST/$DATABASE' 

echo "Patching for Odoo database $DATABASE has finished."
