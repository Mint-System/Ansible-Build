- name: "Ensure odoo addon dir exists"
  file:
    path: "{{ odoo_data_dir }}/addons"
    state: directory

- name: "Remove duplicates from app list"
  set_fact:
    odoo_apps: "{{ odoo_apps | unique }}"

- name: "Get odoo app dependencies"
  set_fact:
    odoo_app_dependencies: "{{ odoo_apps | json_query('[*].depends[]') }}"

- name: "Get odoo app names"
  set_fact:
    odoo_app_names: "{{ odoo_apps | json_query('[*].name') | list }}"

- name: Check odoo app dependencies
  fail:
    msg: "Missing odoo app {{ item }}"
  when: item not in odoo_app_names
  loop: "{{ odoo_app_dependencies }}"

- name: List apps to be installed
  debug:
    msg: "{{ odoo_app_names }}"
  
# - name: "Check downloaded {{ role_name }} zip archives"
#   stat:
#     path: "{{ odoo_apps_tmp_dir }}/{{ item.name }}-{{ item.version }}.zip"
#     get_checksum: false
#     get_md5: false
#     get_mime: false
#     get_attributes: false
#   register: downloaded_odoo_apps
#   loop: "{{ odoo_apps }}"

# - name: Process downloaded odoo apps
#   set_fact:
#     downloaded_odoo_apps: "{{ downloaded_odoo_apps | json_query('results[*] | [?stat.exists==`true`].stat.path') | list }}"

# - name: List apps downloaded
#   debug:
#     msg: "{{ downloaded_odoo_apps }}"

- name: "Download {{ role_name }} zip archives"
  get_url:
    url: "{{ odoo_apps_base_url }}{{ item.name }}-{{ item.version }}.zip"
    dest: "{{ odoo_apps_tmp_dir }}/{{ item.name }}-{{ item.version }}.zip"
  loop: "{{ odoo_apps }}"
  when: item.version is defined

- name: "Upload {{ role_name }} zip archives"
  copy:
    src: "{{ item.file }}"
    dest: "{{ odoo_apps_tmp_dir }}/{{ item.name }}-{{ item.version }}.zip"
  loop: "{{ odoo_apps }}"
  when: item.file is defined

- name: "Extract downloaded {{ role_name }} zip archives"
  unarchive:
    src: "{{ odoo_apps_tmp_dir }}/{{ item.name }}-{{ item.version }}.zip"
    dest: "{{ odoo_apps_tmp_dir }}"
    remote_src: true
    list_files: true
  args:
    creates: "{{ odoo_apps_tmp_dir }}/{{ item.name }}-{{ item.version }}"
  loop: "{{ odoo_apps }}"
  register: downloaded_archive_contents
  when: item.version is defined

- name: "Extract uploaded {{ role_name }} zip archives"
  unarchive:
    src: "{{ odoo_apps_tmp_dir }}/{{ item.file }}"
    dest: "{{ odoo_apps_tmp_dir }}"
    remote_src: true
    list_files: true
  loop: "{{ odoo_apps }}"
  register: uploaded_archive_contents
  when: item.file is defined

- name: "Copy downloaded {{ role_name }} to addons dir"
  synchronize:
    src: "{{ odoo_apps_tmp_dir }}/{{ item.name }}-{{ item.version }}/"
    dest: "{{ odoo_data_dir }}/addons/{{ item.name }}/"
    delete: true
  delegate_to: "{{ inventory_hostname }}"
  loop: "{{ odoo_apps }}"
  when: item.version is defined
  notify: Restart odoo container

- name: "Copy uploaded {{ role_name }} to addons dir"
  copy:
    src: "{{ odoo_apps_tmp_dir }}/{{ item.files[0] }}"
    dest: "{{ odoo_data_dir }}/addons/{{ item.item.name }}"
    remote_src: true
  when: uploaded_archive_contents.resulsts is defined and item.files[0] is match(".*\/$")
  loop: "{{ uploaded_archive_contents.results }}"
  notify: Restart odoo container

- name: "Register {{ role_name }} folders" # noqa 306
  command: "ls -1 {{ odoo_data_dir }}/addons/"
  changed_when: false
  register: existing_odoo_apps

- name: "Remove unmanaged {{ role_name }} folder"
  file:
    path: "{{ odoo_data_dir }}/addons/{{ item }}"
    state: "absent"
  loop: "{{ existing_odoo_apps.stdout_lines }}"
  when: item is not search('_data') and item not in odoo_app_names and odoo_apps_remove_unmanaged_folders