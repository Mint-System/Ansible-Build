#!/usr/bin/env bash
set -e

# Get script name
script=$(basename "$0")
version="1.0.0"

# Display Help
help() {
    echo
    echo "$script"
    echo
    echo 'Description: Restore docker volumes.'
    echo "Syntax: $script [-v|-f|-V|help]"
    echo 'Example: $script -v postgres_data01 -f /var/tmp/postgres_data01.tar'
    echo 'options:'
    echo '  -v    Volume name. Defaults to tar file name.'
    echo '  -f    Path to tar file.'
    echo '  -V    Show $script version.'
    echo '  help  Show $script manual.'
    echo
}

# Show help and exit
if [[ "$1" == 'help' ]]; then
    help
    exit
fi

# Process params
while getopts 'v:f:V' opt; do
    case $opt in
        v) volume="$OPTARG";;
        f) file="$OPTARG";;
        V) echo "$script version $version"
           exit 0
        ;;
        \?) echo "Invalid option -$OPTARG" >&2
            help
            exit 1
        ;;
    esac
done

# Verify variables
[[ -z "$file" ]] && { echo 'Parameter -f|filename is empty' ; exit 1; }

# Fallback to environment vars and default values
filename=$(basename -- "$file")
dir=$(dirname "$file")
: "${volume:="${filename%%.*}"}"

# Warning
echo 'Make sure to stop the attached containers before running the restore.'

# Restore dump for volume
echo "Run restore $dir/$filename to Docker volume $volume ..."
docker run --rm -v "$volume:/_data" -v "$dir:/restore" ubuntu /bin/bash -c "
    shopt -s dotglob && cd /_data && rm -rf -- * || true && tar xf /restore/$filename --strip 1"

# Notify if restore has finished
echo 'The Docker volume restore has finished.'
