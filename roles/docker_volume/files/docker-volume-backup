#!/usr/bin/env bash
set -e

# Get script name
script=$(basename "$0")
version="1.0.0"

# Display Help
help() {
    echo
    echo "$script"
    echo
    echo 'Description: Backup docker volumes.'
    echo "Syntax: $script [-c|-a|-v|-e|-o|-V|help]"
    echo 'Example: $script -c jenkins -v jenkins_data01 -e workspace -o /tmp '
    echo 'options:'
    echo "  -c    Docker container name."
    echo '  -a    Backup all volumes.'
    echo '  -v    Comma-separated list of volume names.'
    echo "  -o    Output directory. Defaults to '/var/tmp'"
    echo '  -e    Exclude option for tar command.'
    echo "  -V    Show $script version."
    echo "  help  Show $script manual."
    echo
}

# Show help and exit
if [[ "$1" == 'help' ]]; then
    help
    exit
fi

# Initialise option flag with a false value
all='false'

# Process params
while getopts ":c: :a :v: :e: :o: :V" opt; do
    case $opt in
        c) container="$OPTARG"
        ;;
        a) all='true'
        ;;
        v) volumes="$OPTARG"
        ;;
        e) exclude="$OPTARG"
        ;;
        o) dir="$OPTARG"
        ;;
        V) echo "$script version $version"
        exit 0
        ;;
        \?) echo "Invalid option -$OPTARG" >&2
        help
        exit 1;;
    esac
done

# Fallback to environment vars and default values
: "${dir:=/var/tmp}"

# Verify variables
[[ -z "$volumes" ]] && [[ -z "$all" ]] && { echo 'Parameter -v|volumes or -a|all must be set' ; exit 1; }
[[ -z "$dir" ]] && { echo 'Parameter -d|dir is empty' ; exit 1; }
[[ -z "$container" ]] && { echo 'Parameter -c|container is empty' ; exit 1; }

if $all; then
    # Get all volumes from docker container
    volume_list=$(docker inspect -f '{{ range .Mounts }}{{ .Name }}{{ end }}' "$container")

    # Concate volume list
    printf -v volumes '%s,' "${volume_list[@]}"
    volumes="${volumes%,}"
fi

if [[ -n $volumes ]] ; then
    # Split volumes param values
    volume_list=($(echo $volumes | tr ',' '\n'))
fi

# Create backup folder
mkdir -p "${dir}/${container}"

# Cleanup backup folder
rm -rf ${dir:?}/"${container}"/*

# Warning
echo "Make sure to stop the container $container before creating a backup."

# Create dump with docker for each database
for volume in "${volume_list[@]}"; do
    if [[ -n "$exclude" ]]; then
        echo "Run backup for Docker volume $volume with the exclude option."
        docker run --rm -v "$volume:/_data" -v "${dir}/${container}:/backup" ubuntu tar --exclude="$exclude" --warning=no-file-changed -cf "/backup/$volume.tar" /_data
    else
        echo "Run backup for Docker volume $volume."
        docker run --rm -v "$volume:/_data" -v "${dir}/${container}:/backup" ubuntu tar --warning=no-file-changed -cf "/backup/$volume.tar" /_data
    fi
done


# Notify if backup has finished
echo "The Docker volume backup has finished: ${dir}/${container}/{$volumes}.tar"
