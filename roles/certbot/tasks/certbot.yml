- name: Ensure nginx data dir exists
  file:
    path: "{{ nginx_data_dir }}/proxies"
    state: directory

- name: Dig DNS CNAME record
  debug:
    msg: "{{ lookup('dig', item.src_hostname, 'qtype=CNAME') }}"
  register: dig
  loop: "{{ nginx_proxies }}"

- name: Fail if DNS record points to alias.zeit.co.
  fail:
    msg: DNS record points to default alias.
  when: item.msg == 'alias.zeit.co.'
  loop: "{{ dig.results }}"

- name: Fail if DNS record points to cname.vercel-dns.com.
  fail:
    msg: DNS record points to default alias.
  when: item.msg == 'cname.vercel-dns.com.'
  loop: "{{ dig.results }}"

- name: "Get list of {{ role_name }} certs"
  stat:
    path: "{{ certbot_data_dir }}/live/{{ item.src_hostname }}"
  loop: "{{ nginx_proxies }}"
  register: certbot_certs
  when: item.ssl is defined

- name: Create list of missing certs
  set_fact:
    certbot_missing_certs: "{{ certbot_certs | json_query(certbot_stat_filter) | list }}"

- name: Log missing certificates
  debug:
    var: certbot_missing_certs

- name: Copy nginx conf files
  copy:
    src: "{{ item }}"
    dest: "{{ nginx_data_dir }}/"
  loop:
    - files/default.conf

- name: "Copy nginx {{ role_name }} conf"
  template:
    src: templates/nginx-certbot.conf
    dest: "{{ nginx_data_dir }}/proxies/{{ item.src_hostname }}.conf"
  vars:
    server_name: "{{ item.src_hostname }}"
  loop: "{{ certbot_missing_certs }}"

- name: "Get infos on proxy container {{ nginx_hostname }}"
  docker_container_info:
    name: "{{ nginx_hostname }}"
  register: nginx_container

- name: "Restart container {{ nginx_hostname }}"
  docker_container:
    name: "{{ nginx_hostname }}"
    restart: yes
    state: started
  when: nginx_container.exists and certbot_missing_certs

- name: "Start proxy container {{ nginx_hostname }}"
  docker_container:
    name: "{{ nginx_hostname }}"
    labels:
      description: "{{ nginx_description }}"
    image: "{{ nginx_image }}"
    ports:
      - 80:80
    volumes:
      - "{{ nginx_data_dir }}/proxies:/etc/nginx/conf.d/proxies/:ro"
      - "{{ nginx_data_dir }}/default.conf:/etc/nginx/conf.d/default.conf"
      - "{{ certbot_data_dir }}/:/etc/letsencrypt/"
      - "{{ certbot_data_dir }}/www/:/var/www/certbot/"
    networks:
      - name: "{{ docker_network_name }}"
    log_driver: "{{ docker_log_driver }}"
    log_options:
      max-size: "{{ docker_log_max_size }}"
      max-file: "{{ docker_log_max_file }}"
  when: not nginx_container.exists and certbot_missing_certs

- name: Wait for proxy container
  pause:
    seconds: "5"
  when: certbot_missing_certs

- name: "Issue certificate with {{ role_name }}"
  docker_container:
    name: "{{ item.src_hostname }}"
    image: "{{ certbot_image }}"
    volumes:
      - "{{ certbot_data_dir }}/:/etc/letsencrypt/"
      - "{{ certbot_data_dir }}/www/:/var/www/certbot/"
    command: certonly --webroot --email {{ certbot_email }} --agree-tos --webroot-path=/var/www/certbot/ -d {{ item.src_hostname }}
  loop: "{{ certbot_missing_certs }}"
  loop_control:
    pause: 5

# FIXME: Replace this task with auto_remove: true
- name: "Remove {{ role_name }} container"
  docker_container:
    name: "{{ item.src_hostname }}"
    state: absent
  loop: "{{ certbot_missing_certs }}"

- name: Copy renew certs script
  template:
    src: renew-certs
    dest: "{{ certbot_data_dir }}/"
    mode: +x

- name: Register renew certs job
  cron:
    name: "Renew certs for {{ nginx_hostname }}"
    minute: "{{ 59 |random(seed=nginx_hostname) }}"
    hour: "0"
    weekday: "0"
    job: "{{ certbot_data_dir }}/renew-certs && docker restart {{ nginx_hostname }}; write-node-exporter-metric -c 'Renew certs for {{ nginx_hostname }}' -v $?"

- name: "Register existing {{ role_name }} certificates" # noqa 306
  shell: "ls -1 -d {{ certbot_data_dir }}/live/*/ | xargs -n 1 basename"
  changed_when: false
  ignore_errors: true
  register: certbot_managed_certs

- name: Create managed certificate list from proxy list
  set_fact:
    managed_certs: "{{ nginx_proxies | selectattr('ssl', 'defined') | map(attribute='src_hostname') | list }}"

- name: "Remove unmanaged certificate with {{ role_name }}"
  docker_container:
    name: "{{ item }}"
    image: "{{ certbot_image }}"
    volumes:
      - "{{ certbot_data_dir }}/:/etc/letsencrypt/"
      - "{{ certbot_data_dir }}/www/:/var/www/certbot/"
    command: delete --cert-name {{ item }}
    auto_remove: true
  loop: "{{ certbot_managed_certs.stdout_lines }}"
  when: item not in managed_certs
  loop_control:
    pause: 5

- name: Copy nginx ssl conf files
  copy:
    src: "{{ item }}"
    dest: "{{ certbot_data_dir }}/"
  loop:
    - files/options-ssl-nginx.conf
    - files/ssl-dhparams.pem
    - files/proxy-params.conf