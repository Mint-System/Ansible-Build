#!/bin/bash
set -e

# Get script name
SCRIPT=$(basename "$0")
VERSION="1.0.0"

# Display Help
Help() {
    echo
    echo "$SCRIPT"
    echo
    echo "Description: Retrieve secret from Ansible Vault."
    echo "Syntax: $SCRIPT [-i inventory] [-l host] [-k key] [-V|help]"
    echo "Example: $SCRIPT -i inventories/odoo -l zeus_erp -k vault_odoo_master_password"
    echo "options:"
    echo "  -i    Inventory name."
    echo "  -l    Ansible hostname."
    echo "  -k    Vault key variable to grep."
    echo "  -V    Show $SCRIPT version."
    echo "  help  Show $SCRIPT manual."
    echo
}

# Show help and exit
if [[ "$1" == "help" ]]; then
    Help
    exit
fi

# Process params
while getopts ":i:l:k:V" opt; do
    case $opt in
        i) INVENTORY_PATH="$OPTARG";;
        l) HOST="$OPTARG";;
        k) VAULT_KEY="$OPTARG";;
        V) echo "$SCRIPT version $VERSION"
           exit 0
        ;;
        \?) echo "Invalid option -$OPTARG" >&2
            Help
            exit 1
        ;;
    esac
done

CONFIG_FILE="$HOME/.ansible-vault-get.conf"

if [[ ! -f "$CONFIG_FILE" ]]; then
    echo "Error: Configuration file '$CONFIG_FILE' not found."
    echo "Please init config file with this command:"
    echo "echo \"ANSIBLE_PATH=/path/to/ansible\" > $CONFIG_FILE"
    exit 1
fi  

[[ -z "$INVENTORY_PATH" ]] && { echo "Parameter -i|inventory path is empty" ; exit 1; }
[[ -z "$HOST" ]] && { echo "Parameter -l|host is empty" ; exit 1; }
[[ -z "$VAULT_KEY" ]] && { echo "Parameter -k|key is empty" ; exit 1; }


# Load the inventory path from the configuration file
ANSIBLE_PATH=$(grep "ANSIBLE_PATH" "$CONFIG_FILE" | cut -d '=' -f2)

if [[ -z "$ANSIBLE_PATH" ]]; then
    echo "Error: Ansible path $ANSIBLE_PATH not found."
    echo "Update config file with this command:"
    echo "vi $CONFIG_FILE"
    exit 1
fi

cd "$ANSIBLE_PATH"
source ./task source >/dev/null

VAULT_FILE="$INVENTORY_PATH/host_vars/$HOST/vault.yml"

if [[ ! -f "$VAULT_FILE" ]]; then
    echo "Error: Vault file '$VAULT_FILE' not found."
    exit 1
fi

echo $(ansible-vault view "$VAULT_FILE" | grep "${VAULT_KEY}:" | cut -d ':' -f2)
