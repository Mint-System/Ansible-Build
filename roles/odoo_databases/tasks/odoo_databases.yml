---
- name: Get all Odoo databases
  ansible.builtin.command: /usr/local/bin/docker-odoo-list -c "{{ odoo_hostname }}"
  register: existing_databases
  changed_when: false
  when: odoo_replicas == 1

- name: Get all Odoo databases on first replica
  ansible.builtin.command: /usr/local/bin/docker-odoo-list -c "{{ odoo_hostname }}_1"
  register: existing_databases_replicas # use different var, because existing_databases has content as it skipped
  changed_when: false
  when: odoo_replicas > 1

- name: Confirm database drop
  ansible.builtin.pause:
    prompt: Please confirm you want to drop database {{ item.name }} on container {{ odoo_hostname }}! Press return to continue. Press ctrl+c to abort.
  when: odoo_replicas == 1 and item.state == 'absent' and item.name in existing_databases.stdout_lines
  loop: "{{ odoo_databases }}"

- name: Confirm database drop
  ansible.builtin.pause:
    prompt: Please confirm you want to drop database {{ item.name }} on container {{ odoo_hostname }}! Press return to continue. Press ctrl+c to abort.
  when: odoo_replicas > 1 and item.state == 'absent' and item.name in existing_databases_replicas.stdout_lines
  loop: "{{ odoo_databases }}"

- name: Drop disabled databases
  ansible.builtin.command: /usr/local/bin/docker-odoo-drop -c "{{ odoo_hostname }}" -d "{{ item.name }}"
  when: odoo_replicas == 1 and item.state == 'absent' and item.name in existing_databases.stdout_lines
  loop: "{{ odoo_databases }}"

- name: Drop disabled databases on first replica
  ansible.builtin.command: /usr/local/bin/docker-odoo-drop -c "{{ odoo_hostname }}_1" -d "{{ item.name }}"
  when: odoo_replicas > 1 and item.state == 'absent' and item.name in existing_databases_replicas.stdout_lines
  loop: "{{ odoo_databases }}"
