- name: "Ensure {{ role_name }} data dir exists"
  file:
    path: "{{ nginx_data_dir }}/proxies"
    state: directory

- name: "Copy nginx default conf"
  template:
    src: default.conf
    dest: "{{ nginx_data_dir }}/default.conf"

- name: "Get list of active {{ role_name }} certs"
  stat:
    path: "{{ certbot_data_dir }}/live/{{ item.src_hostname }}"
  loop: "{{ nginx_proxies }}"
  register: certbot_certs
  when: nginx_proxies is defined

- name: "Create list of active certs"
  set_fact:
    certbot_active_certs: "{{ certbot_certs | json_query('results[*] | [?stat.exists==`true`].item.src_hostname') | list }}"
  when: nginx_proxies is defined
  
- name: "Copy {{ role_name }} conf"
  template:
    src: nginx-proxy.conf
    dest: "{{ nginx_data_dir }}/proxies/{{ item.src_hostname | replace('*.', 'wildcard.') }}.conf"
  vars:
    upstreams: "{{ item.upstreams | default(false) }}"
    src_hostname: "{{ item.src_hostname }}"
    dest_hostname: "{{ item.dest_hostname | default('') }}"
    dest_replicas: "{{ item.dest_replicas | default(1) }}"
    dest_port: "{{ item.dest_port | default(80)  }}"
    options: "{{ item.options | default('') }}"
    redirect_hostname: "{{ item.redirect_hostname | default(false) }}"
    redirect_url: "{{ item.redirect_url | default(false) }}"
    root: "{{ item.root | default(false) }}"
    ssl: "{{ item.ssl | default(false) }}"
    locations: "{{ item.locations | default(false) }}"
    server_names: "{{ item.server_names | default(false) }}"
    cache: "{{ item.cache | default(false) }}"
    limit_req_zone: "{{ item.limit_req_zone | default(false) }}"    
  loop: "{{ nginx_proxies }}"
  notify: "Restart {{ role_name }} container"
  when: nginx_proxies is defined

- name: "Register {{ role_name }} conf files" # noqa 306
  shell: "find {{ nginx_data_dir }}/proxies/ -type f -name '*.conf' -printf '%f\n'"
  changed_when: false
  register: nginx_proxy_conf_files

- name: "Create managed file list from proxy list"
  set_fact:
    managed_files: "{{ nginx_proxies | map(attribute='src_hostname') | map('replace', '*.', 'wildcard.') | map('regex_replace', '^(.*)$', '\\1.conf') | list }}"
  when: nginx_proxies is defined
  
- name: "Remove unmanaged {{ role_name }} conf files"
  file:
    path: "{{ nginx_data_dir }}/proxies/{{ item }}"
    state: "absent"
  loop: "{{ nginx_proxy_conf_files.stdout_lines }}"
  when: item not in managed_files

- name: "Get infos on container {{ nginx_hostname }}"
  docker_container_info:
    name: "{{ nginx_hostname }}"
  register: nginx_container

- name: "Test {{ role_name }} conf files"
  command: "docker exec {{ nginx_hostname }} nginx -t"
  when: nginx_container.exists
