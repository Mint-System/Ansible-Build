---
- name: Get all vercel dns records
  ansible.builtin.uri:
    url: "{{ vercel_api_url }}/v4/domains/{{ item.domain }}/records?teamId={{ vercel_team_id }}&limit=1000"
    headers:
      Content-Type: application/json
      Authorization: Bearer {{ vercel_token }}
    return_content: true
  loop: "{{ vercel_dns }}"
  register: vercel_dns_records

- name: Set vercel dns simple fact
  ansible.builtin.set_fact:
    record: "{{ item.1.name }}.{{ item.0.item.domain }}-{{ item.1.type }}"
  with_subelements:
    - "{{ vercel_dns_records.results }}"
    - json.records
  register: vercel_dns_simple
  no_log: true

- name: Make a simple list
  ansible.builtin.set_fact:
    vercel_dns_simple: "{{ vercel_dns_simple.results | map(attribute='ansible_facts.record') | list }}"

- name: Ensure DNS entry exists
  ansible.builtin.uri:
    url: "{{ vercel_api_url }}/v2/domains/{{ item.0.domain }}/records?teamId={{ vercel_team_id }}"
    method: POST
    headers:
      Content-Type: application/json
      Authorization: Bearer {{ vercel_token }}
    body: "{{ item.1  | dict2items | rejectattr('key', 'equalto', 'state') | list | items2dict | to_json }}"
  with_subelements:
    - "{{ vercel_dns }}"
    - records
  when: ((item.1.name + "." + item.0.domain + "-" + item.1.type) not in vercel_dns_simple) and (item.1.state == 'present')
  register: response
  changed_when: response.status == 200

- name: Set vercel dns absent fact
  ansible.builtin.set_fact:
    record: "{{ item.1.name }}.{{ item.0.domain }}-{{ item.1.type }}"
  with_subelements:
    - "{{ vercel_dns }}"
    - records
  when: item.1.state == 'absent'
  register: vercel_dns_absent

- name: Make a simple list
  ansible.builtin.set_fact:
    vercel_dns_absent: "{{ vercel_dns_absent.results | selectattr('ansible_facts.record','defined') | map(attribute='ansible_facts.record') | list }}"

- name: Ensure DNS entries to be removed
  ansible.builtin.uri:
    url: "{{ vercel_api_url }}/v2/domains/{{ item.0.item.domain }}/records/{{ item.1.id }}?teamId={{ vercel_team_id }}"
    method: DELETE
    headers:
      Content-Type: application/json
      Authorization: Bearer {{ vercel_token }}
  with_subelements:
    - "{{ vercel_dns_records.results }}"
    - json.records
  when: (item.1.name + "." + item.0.item.domain + "-" + item.1.type) in vercel_dns_absent
  register: response
  changed_when: response.status == 200
