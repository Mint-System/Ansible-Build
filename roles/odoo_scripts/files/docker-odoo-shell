#!/bin/bash
set -e

# Get script name
SCRIPT=$(basename "$0")
VERSION="1.0.0"

# Display Help
Help() {
    echo
    echo "$SCRIPT"
    echo
    echo "Description: Run python code in Odoo container."
    echo "Syntax: $SCRIPT [-c|-d|-p|-f|-v|help]"
    echo "Example: $SCRIPT -d erp-dev -c odoo06 -p \"print(env.user.name)\""
    echo "options:"
    echo "  -c    Docker container. Defaults to 'odoo'."
    echo "  -d    Database name."
    echo "  -p    Python code as string."
    echo "  -f    Commit changes to database."
    echo "  -v    Show $SCRIPT version."
    echo "  help  Show $SCRIPT manual."
    echo
}

# Show help and exit
if [[ "$1" == "help" ]]; then
    Help
    exit
fi

# Initialise option flag
FORCE='false'

# Process params
while getopts ":c: :d: :p: :f :v" opt; do
    case $opt in
        c) CONTAINER="$OPTARG";;
        d) DATABASE="$OPTARG";;
        p) CODE="$OPTARG";;
        f) FORCE='true';;
        v) echo "$SCRIPT version $VERSION"
        exit 0
        ;;
        \?) echo "Invalid option -$OPTARG" >&2
        Help
        exit;;
    esac
done

# Fallback to environment vars and default values
: ${CONTAINER:='odoo'}

# Verify variables
[[ -z "$DATABASE" ]] && { echo "Parameter -d|database is empty" ; exit 1; }

# Switch container name with id
CONTAINER_ID=$(docker ps -f "name=$CONTAINER" -q | tail -n1)

# Append commit command if forced
if $FORCE; then
    CODE="${CODE};self.env.cr.commit()"
fi

if [[ -n $CODE ]]; then
    echo "Execute code in container $CONTAINER on datbase $DATABASE." 
    docker exec $CONTAINER_ID bash -c "echo \"$CODE\" | odoo shell -d $DATABASE --db_host=\$HOST -r \$USER -w \$PASSWORD --no-http"
else
    echo "Execute code in container $CONTAINER on datbase $DATABASE." 
    docker exec -it $CONTAINER_ID bash -c "odoo shell -d $DATABASE --db_host=\$HOST -r \$USER -w \$PASSWORD --no-http"
fi

if $FORCE; then
    echo "Changes to the database have been committed."
fi
