#!/usr/bin/env bash
set -e

# Get script name
script=$(basename "$0")
version="1.0.0"

# Display Help
help() {
    echo
    echo "$script"
    echo
    echo 'Description: Drop Odoo database in Docker container.'
    echo "Syntax: $script [-d|-c|-V|help]"
    echo 'Example: $script -c odoo01 -d erp'
    echo 'options:'
    echo '  -c    Docker container. Defaults to '\''odoo'\''.'
    echo '  -d    Database name.'
    echo '  -V    Show $script version.'
    echo '  help  Show $script manual.'
    echo
}

# Show help and exit
if [[ "$1" == 'help' ]]; then
    help
    exit
fi

# Process params
while getopts ':c: :d: :V' opt; do
    case $opt in
        c) container="$OPTARG";;
        d) database="$OPTARG";;
        V) echo "$script version $version"
        exit 0
        ;;
        \?) echo "Invalid option -$OPTARG" >&2
        help
        exit;;
    esac
done

# Fallback to environment vars and default values
: "${container:=odoo}"

# Verify variables
[[ -z "$database" ]] && { echo 'Parameter -d|database is empty' ; exit 1; }

# Switch container name with id
container_id=$(docker ps -f "name=$container" -q | tail -n1)
[[ -z "$container_id" ]] && { echo "Container id for $container not found." ; exit 1; }

# Set alias
docker_exec_bash="docker exec $container_id /bin/bash -c"
docker_exec_root_bash="docker exec --user root $container_id /bin/bash -c"

# Kill datbase connections
echo "Kill database connections on $database"
query="SELECT pg_terminate_backend(pid) FROM pg_stat_activity WHERE datname = '$database';"
$docker_exec_bash "psql postgres://\$USER:\$PASSWORD@\$HOST:5432/postgres -c \"$query\""

# Drop database
echo "Drop database $database"
query="DROP DATABASE \\\"$database\\\";" # Escape quotes twice
$docker_exec_bash "psql postgres://\$USER:\$PASSWORD@\$HOST:5432/postgres -c \"$query\""

# Remove filestore
echo "Remove filestore $database"
$docker_exec_root_bash "rm -rf /var/lib/odoo/filestore/$database"

# Notify of removal
echo "The Odoo database $database has been removed."
