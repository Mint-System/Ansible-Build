#!/bin/bash

# Exit script if command fails
# -u stops the script on unset variables
# -e stops the script on errors
# -o pipefail stops the script if a pipe fails
set -e

# Get script name
SCRIPT=$(basename "$0")

# Display Help
Help() {
    echo
    echo "$SCRIPT"
    echo
    echo "Description: Drop Odoo database in Docker container."
    echo "Syntax: $SCRIPT [-d|-c|help]"
    echo "Example: $SCRIPT -d erp -c odoo01"
    echo "options:"
    echo "  -d    Database name. Defaults to 'odoo'."
    echo "  -c    Docker container. Defaults to 'odoo'."
    echo "  help  Show $SCRIPT manual."
    echo
}

# Show help and exit
if [[ $1 == 'help' ]]; then
    Help
    exit
fi

# Process params
while getopts ":d: :c:" opt; do
  case $opt in
    c) CONTAINER="$OPTARG";;
    d) DATABASE="$OPTARG";;
    \?) echo "Invalid option -$OPTARG" >&2
    Help
    exit;;
  esac
done

# Fallback to environment vars and default values
: ${DATABASE:='odoo'}
: ${CONTAINER:='odoo'}

# Set alias
docker_exec_bash="docker exec $CONTAINER /bin/bash -c"
docker_exec_root_bash="docker exec --user root $CONTAINER /bin/bash -c"

# Kill datbase connections
echo -e "\e[1A\e[KKill all database connections"
QUERY="SELECT pg_terminate_backend(pid) FROM pg_stat_activity WHERE datname = '$DATABASE';"
$docker_exec_bash "psql postgres://\$USER:\$PASSWORD@\$HOST:5432/postgres -c \"$QUERY\""

# Drop database
echo -e "\e[1A\e[KDrop database $DATABASE"
QUERY="DROP DATABASE \\\"$DATABASE\\\";" # Escape quotes twice
$docker_exec_bash "psql postgres://\$USER:\$PASSWORD@\$HOST:5432/postgres -c \"$QUERY\""

# Remove filestore
echo -e "\e[1A\e[KRemove filestore $DATABASE"
$docker_exec_root_bash "rm -rf /var/lib/odoo/filestore/$DATABASE"

# Notify of removal
echo -e "\e[1A\e[KThe Odoo database $DATABASE has been removed."
