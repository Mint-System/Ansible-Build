#!/bin/bash
set -e

SCRIPT=$(basename "$0")
VERSION="2.0.0"

# Display Help
Help() {
    echo
    echo "$SCRIPT"
    echo
    echo "Description: Run Odoo upgrade scripts for target PostgreSQL database."
    echo "Syntax: $SCRIPT [-c|-s|-t|-r|-u|-V|help]"
    echo "Example: $SCRIPT -c postgres01 -h localhost -d erp -s 16.0 -n upgrade -t 17.0 -m test -l MXXXXXXXXX"
    echo "options:"
    echo "  -c    PostgreSQL container. Defaults to 'postgres'."
    echo "  -d    Current database name."
    echo "  -s    Current Odoo version."
    echo "  -n    Target database name."
    echo "  -t    Target Odoo version."
    echo "  -l    Optional Odoo subscription code."
    echo "  -m    Upgrade mode. Options are 'test' or 'production'. Defaults to 'test'."
    echo "  -V    Show $SCRIPT version."
    echo "  help  Show $SCRIPT manual."
    echo
}

# Show help and exit
if [[ "$1" == "help" ]]; then
    Help
    exit
fi

# Process params
while getopts ":c: :d: :s: :n: :t: :m: :l: :V" opt; do
    case $opt in
        c) CONTAINER="$OPTARG";;
        d) DATABASE="$OPTARG";;
        s) ODOO_VERSION="$OPTARG";;
        n) TARGET_DATABASE="$OPTARG";;
        t) TARGET_ODOO_VERSION="$OPTARG";;
        m) MODE="$OPTARG";;
        l) ODOO_ENTERPRISE_CODE="$OPTARG";;
        V) echo "$SCRIPT version $VERSION"
        exit 0
        ;;
        \?) echo "Invalid option -$OPTARG" >&2
        Help
        exit;;
    esac
done

# Fallback to environment vars and default values
: "${CONTAINER:=postgres}"
: "${MODE:=test}"

# Verify variables
[[ -z "$DATABASE" ]] && { echo "Parameter -d|database is empty" ; exit 1; }
[[ -z "$ODOO_VERSION" ]] && { echo "Parameter -s|current version is empty" ; exit 1; }
[[ -z "$TARGET_DATABASE" ]] && { echo "Parameter -n|new database is empty" ; exit 1; }
[[ -z "$TARGET_ODOO_VERSION" ]] && { echo "Parameter -t|target version is empty" ; exit 1; }

# Retrieve container info
NETWORK_ID=$(docker inspect --format '{{range .NetworkSettings.Networks}}{{.NetworkID}}{{end}}' "$CONTAINER")
NETWORK=$(docker network inspect --format '{{.Name}}' "$NETWORK_ID")
PGHOST="$CONTAINER"
PGUSER=$(docker exec "$CONTAINER" /bin/bash -c "echo \$POSTGRES_USER")
PGPASSWORD=$(docker exec "$CONTAINER" /bin/bash -c "echo \$POSTGRES_PASSWORD")
export NETWORK
export PGHOST
export PGUSER
export PGPASSWORD 

function odoo-upgrade() {
    docker run -e PGHOST="$PGHOST" -e PGUSER="$PGUSER" -e PGPASSWORD="$PGPASSWORD" \
        --network="$NETWORK" mintsystem/odoo-upgrade "$@"
}

echo "Run upgrade script for database $DATABASE in $MODE mode."
echo "The database will be upgraded from $ODOO_VERSION to $TARGET_ODOO_VERSION."
if [ -z "$ODOO_ENTERPRISE_CODE" ]; then
    odoo-upgrade "$MODE" -d "$DATABASE" -t "$TARGET_ODOO_VERSION" -r "$TARGET_DATABASE"
else
    odoo-upgrade "$MODE" -d "$DATABASE" -t "$TARGET_ODOO_VERSION" -r "$TARGET_DATABASE" -c "$ODOO_ENTERPRISE_CODE"
fi
echo "The upgrade has been successful. The upgraded database has been restored as '$TARGET_DATABASE'."
