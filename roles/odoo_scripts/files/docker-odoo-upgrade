#!/bin/bash
set -e

# Check requiremements
command -v rsync >/dev/null 2>&1 || { echo >&2 "rsync not found."; exit 1; }
command -v ssh-keygen >/dev/null 2>&1 || { echo >&2 "ssh-keygen not found."; exit 1; }
command -v psql >/dev/null 2>&1 || { echo >&2 "psql not found."; exit 1; }

SCRIPT=$(basename "$0")
VERSION="1.0.0"

# Display Help
Help() {
    echo
    echo "$SCRIPT"
    echo
    echo "Description: Run Odoo upgrade scripts for target PostgreSQL database."
    echo "Syntax: $SCRIPT [-c|-s|-t|-r|-u|-V|help]"
    echo "Example: $SCRIPT -c postgres01 -h localhost -p 6543 -d erp -s 16.0 -t 17.0 -m test -l MXXXXXXXXX"
    echo "options:"
    echo "  -c    PostgreSQL container. Defaults to 'postgres'."
    echo "  -h    PostgreSQL hostname. Defaults to container name."
    echo "  -p    PostgreSQL port. Defaults to '5432'."
    echo "  -d    Database name."
    echo "  -s    Current Odoo version."
    echo "  -t    Target Odoo version."
    echo "  -l    Optional Odoo subscription code."
    echo "  -m    Upgrade mode. Options are 'test' or 'production'. Defaults to 'test'."
    echo "  -V    Show $SCRIPT version."
    echo "  help  Show $SCRIPT manual."
    echo
}

# Show help and exit
if [[ "$1" == "help" ]]; then
    Help
    exit
fi

# Process params
while getopts ":c: :h: :p: :d: :s: :t: :m: :l: :V" opt; do
    case $opt in
        c) CONTAINER="$OPTARG";;
        h) HOSTNAME="$OPTARG";;
        p) PORT="$OPTARG";;
        d) DATABASE="$OPTARG";;
        s) ODOO_CURRENT_VERSION="$OPTARG";;
        t) ODOO_TARGET_VERSION="$OPTARG";;
        m) MODE="$OPTARG";;
        l) LICENSE="$OPTARG";;
        V) echo "$SCRIPT version $VERSION"
        exit 0
        ;;
        \?) echo "Invalid option -$OPTARG" >&2
        Help
        exit;;
    esac
done

# Fallback to environment vars and default values
: "${CONTAINER:=postgres}"
: "${HOSTNAME:=$CONTAINER}"
: "${CONTAINER:=5432}"
: "${MODE:=test}"

# Verify variables
[[ -z "$ODOO_CURRENT_VERSION" ]] && { echo "Parameter -s|current version is empty" ; exit 1; }
[[ -z "$ODOO_TARGET_VERSION" ]] && { echo "Parameter -t|target version is empty" ; exit 1; }
[[ -z "$DATABASE" ]] && { echo "Parameter -d|database is empty" ; exit 1; }

# Retrieve database credentials
PGHOST="$HOSTNAME"
PGUSER=$(docker exec $CONTAINER /bin/bash -c "echo \$POSTGRES_USER")
PGPASSWORD=$(docker exec $CONTAINER /bin/bash -c "echo \$POSTGRES_PASSWORD")
export PGHOST
export PGUSER
export PGPASSWORD

#FIXME: Run the commands below in a custom Docker container. Get rid of the hostname parameter.

NEW_DATABASE="${DATABASE}_${ODOO_TARGET_VERSION}"
echo "Run upgrade script for database $DATABASE in $MODE mode."
echo "The database will be upgraded from $ODOO_CURRENT_VERSION to $ODOO_TARGET_VERSION."
if [ -z "$LICENSE" ]; then
    python <(curl -s https://upgrade.odoo.com/upgrade) "$MODE" -d "$DATABASE" -t "$ODOO_TARGET_VERSION" -r "$NEW_DATABASE"
else
    python <(curl -s https://upgrade.odoo.com/upgrade) "$MODE" -d "$DATABASE" -t "$ODOO_TARGET_VERSION" -r "$NEW_DATABASE" -c "$LICENSE"
fi
echo "The upgrade has been successful. The upgraded database has been restored as $NEW_DATABASE."
