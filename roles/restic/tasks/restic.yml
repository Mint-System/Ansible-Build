---
- name: Gather package facts
  ansible.builtin.package_facts:
    manager: auto

- name: Fail if package restic is not installed
  ansible.builtin.fail:
    msg: Package restic not installed
  when: "'restic' not in ansible_facts.packages"

- name: Ensure {{ role_name }} backup dir exists
  ansible.builtin.file:
    path: "{{ restic_backup_dir }}"
    state: directory
    owner: "{{ restic_owner }}"
    group: "{{ restic_group }}"
    mode: "0700"

- name: Set {{ role_name }} rest env
  ansible.builtin.set_fact:
    restic_password: "{{ restic_repo_password }}"
    restic_repository: rest:http://{{ restic_rest_user }}:{{ restic_rest_password }}@{{ restic_repo }}
  when: restic_repo_type == 'rest'

- name: Set {{ role_name }} local env
  ansible.builtin.set_fact:
    restic_password: "{{ restic_repo_password }}"
    restic_repository: "{{ restic_repo }}"
  when: restic_repo_type == 'local'

- name: Setup {{ role_name }} wrapper script for main repo
  ansible.builtin.template:
    dest: /usr/local/bin/restic-main
    src: restic-main
    owner: "{{ restic_owner }}"
    group: "{{ restic_group }}"
    mode: "0750"

- name: Check if repo is initialized
  ansible.builtin.command: restic snapshots
  environment:
    RESTIC_PASSWORD: "{{ restic_password }}"
    RESTIC_REPOSITORY: "{{ restic_repository }}"
  ignore_errors: true
  changed_when: false
  register: repo_initalized

- name: Init restic repository
  ansible.builtin.command: restic init
  environment:
    RESTIC_PASSWORD: "{{ restic_password }}"
    RESTIC_REPOSITORY: "{{ restic_repository }}"
  when: repo_initalized.failed

- name: Register backup rotation job
  ansible.builtin.cron:
    name: Backup rotation job
    hour: "23"
    minute: "{{ 59 |random(seed=restic_repo) }}"
    job: restic-main forget --keep-last {{ restic_backup_rotation.last }} --keep-daily {{ restic_backup_rotation.daily }} --keep-weekly {{
      restic_backup_rotation.weekly }} --keep-monthly {{ restic_backup_rotation.monthly }} --prune; write-node-exporter-metric -c "Backup rotation job" -v $?
    disabled: "{{ item.disabled | default(false) }}"
