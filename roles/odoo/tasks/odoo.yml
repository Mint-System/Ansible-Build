---
- name: Include docker volume role
  ansible.builtin.include_role:
    name: docker_volume
  vars:
    docker_volume_name: "{{ odoo_volume_name }}"
  when: odoo_volume_name is defined

- name: Ensure {{ role_name }} data dir exists
  ansible.builtin.file:
    path: "{{ odoo_data_dir }}/enterprise"
    state: directory

- name: Copy {{ role_name }} conf
  ansible.builtin.template:
    src: "{{ item }}"
    dest: "{{ odoo_data_dir }}/{{ item }}"
  loop:
    - odoo.conf
  when: odoo_image.startswith('odoo')
  notify: Restart {{ role_name }} container

- name: Pull {{ role_name }} image
  community.docker.docker_image:
    name: "{{ odoo_image }}"
    source: pull
    force_source: true
  register: pull_odoo_image
  when: not odoo_build_image
  notify: Remove odoo patches

- name: Tag {{ role_name }} image
  ansible.builtin.command: docker tag {{ pull_odoo_image.image.Id[7:19] }} odoo:{{ odoo_revision }}
  when: odoo_revision is defined and not odoo_build_image

- name: Define {{ role_name }} volumes for mintsystem image
  ansible.builtin.set_fact:
    odoo_volumes:
      - "{{ odoo_volume_name }}:/var/lib/odoo"
      - "{{ odoo_data_dir }}/addons:/mnt/addons"
      - "{{ odoo_data_dir }}/enterprise:/mnt/enterprise"

- name: Define {{ role_name }} volumes for odoo image
  ansible.builtin.set_fact:
    odoo_volumes:
      - "{{ odoo_volume_name }}:/var/lib/odoo"
      - "{{ odoo_data_dir }}/addons:/mnt/addons"
      - "{{ odoo_data_dir }}/enterprise:/mnt/enterprise"
      - "{{ odoo_data_dir }}/odoo.conf:/etc/odoo/odoo.conf"
  when: odoo_image.startswith('odoo')

- name: Start {{ role_name }} container {{ odoo_hostname }}
  community.docker.docker_container:
    name: "{{ odoo_hostname }}"
    labels:
      description: "{{ odoo_description }}"
    image: "{{ odoo_image }}"
    restart_policy: unless-stopped
    recreate: false
    state: "{{ odoo_state }}"
    env:
      HOST: "{{ odoo_postgres_hostname }}"
      USER: "{{ odoo_postgres_user }}"
      PASSWORD: "{{ odoo_postgres_password }}"
      POSTGRES_DB: postgres
      PGHOST: "{{ odoo_postgres_hostname }}"
      PGUSER: "{{ odoo_postgres_user }}"
      PGPASSWORD: "{{ odoo_postgres_password }}"
      TZ: "{{ odoo_timezone }}"
      ODOO_ADDONS_PATH: /mnt/addons/,/mnt/enterprise
      ADMIN_PASSWD: "{{ odoo_master_password }}"
      DBFILTER: "{{ odoo_dbfilter }}"
      LIST_DB: "{{ odoo_list_db }}"
      PROXY_MODE: "{{ odoo_proxy_mode }}"
      PYTHON_INSTALL: "{{ odoo_python_install | default('') }}"
      WORKERS: "{{ odoo_workers | int }}"
    ports: "{{ odoo_ports | default([]) }}"
    volumes: "{{ odoo_volumes }}"
    networks:
      - name: "{{ docker_network_name }}"
    log_driver: "{{ docker_log_driver }}"
    log_options:
      max-size: "{{ docker_log_max_size }}"
      max-file: "{{ docker_log_max_file }}"
      tag: "{{ odoo_hostname }}|{{ role_name }}"
  when: odoo_config_map|length == 1

- name: Start {{ role_name }} container {{ odoo_hostname }}
  community.docker.docker_container:
    name: "{{ odoo_hostname }}-{{ item.name }}"
    labels:
      description: "{{ odoo_description }}"
    image: "{{ odoo_image }}"
    restart_policy: unless-stopped
    recreate: false
    env:
      HOST: "{{ odoo_postgres_hostname }}"
      USER: "{{ odoo_postgres_user }}"
      PASSWORD: "{{ odoo_postgres_password }}"
      PGHOST: "{{ odoo_postgres_hostname }}"
      PGUSER: "{{ odoo_postgres_user }}"
      PGPASSWORD: "{{ odoo_postgres_password }}"
      TZ: "{{ odoo_timezone }}"
      ODOO_ADDONS_PATH: /mnt/addons/,/mnt/enterprise
      ADMIN_PASSWD: "{{ odoo_master_password }}"
      DBFILTER: "{{ item.dbfilter | default(odoo_dbfilter) }}"
      LIST_DB: "{{ odoo_list_db }}"
      PROXY_MODE: "{{ odoo_proxy_mode }}"
      PYTHON_INSTALL: "{{ odoo_python_install | default('') }}"
      WORKERS: "{{ odoo_workers | int }}"
    volumes: "{{ odoo_volumes }}"
    networks:
      - name: "{{ docker_network_name }}"
    log_driver: "{{ docker_log_driver }}"
    log_options:
      max-size: "{{ docker_log_max_size }}"
      max-file: "{{ docker_log_max_file }}"
      tag: "{{ odoo_hostname }}|{{ role_name }}"
  loop: "{{ odoo_config_map }}"
  when: odoo_config_map|length > 1

- name: Ensure {{ role_name }} master password is in environment
  ansible.builtin.lineinfile:
    dest: /etc/environment
    state: present
    regexp: ^ODOO_MASTER_PASSWORD=
    line: ODOO_MASTER_PASSWORD={{ odoo_master_password }}
  when: odoo_master_password is defined

- name: Include {{ role_name }} backup from restic client role
  ansible.builtin.include_role:
    name: restic
    tasks_from: restic_odoo_backup
  vars:
    restic_backup_set: "{{ odoo_backup_set }}"
  when: odoo_backup_set is defined
